// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package demo_cbor

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MyStruct) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields5zgensym_1676ddababda6679_6 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields5zgensym_1676ddababda6679_6 uint32
	totalEncodedFields5zgensym_1676ddababda6679_6, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft5zgensym_1676ddababda6679_6 := totalEncodedFields5zgensym_1676ddababda6679_6
	missingFieldsLeft5zgensym_1676ddababda6679_6 := maxFields5zgensym_1676ddababda6679_6 - totalEncodedFields5zgensym_1676ddababda6679_6

	var nextMiss5zgensym_1676ddababda6679_6 int32 = -1
	var found5zgensym_1676ddababda6679_6 [maxFields5zgensym_1676ddababda6679_6]bool
	var curField5zgensym_1676ddababda6679_6 string

doneWithStruct5zgensym_1676ddababda6679_6:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft5zgensym_1676ddababda6679_6 > 0 || missingFieldsLeft5zgensym_1676ddababda6679_6 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft5zgensym_1676ddababda6679_6, missingFieldsLeft5zgensym_1676ddababda6679_6, msgp.ShowFound(found5zgensym_1676ddababda6679_6[:]), decodeMsgFieldOrder5zgensym_1676ddababda6679_6)
		if encodedFieldsLeft5zgensym_1676ddababda6679_6 > 0 {
			encodedFieldsLeft5zgensym_1676ddababda6679_6--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField5zgensym_1676ddababda6679_6 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss5zgensym_1676ddababda6679_6 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss5zgensym_1676ddababda6679_6 = 0
			}
			for nextMiss5zgensym_1676ddababda6679_6 < maxFields5zgensym_1676ddababda6679_6 && (found5zgensym_1676ddababda6679_6[nextMiss5zgensym_1676ddababda6679_6] || decodeMsgFieldSkip5zgensym_1676ddababda6679_6[nextMiss5zgensym_1676ddababda6679_6]) {
				nextMiss5zgensym_1676ddababda6679_6++
			}
			if nextMiss5zgensym_1676ddababda6679_6 == maxFields5zgensym_1676ddababda6679_6 {
				// filled all the empty fields!
				break doneWithStruct5zgensym_1676ddababda6679_6
			}
			missingFieldsLeft5zgensym_1676ddababda6679_6--
			curField5zgensym_1676ddababda6679_6 = decodeMsgFieldOrder5zgensym_1676ddababda6679_6[nextMiss5zgensym_1676ddababda6679_6]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField5zgensym_1676ddababda6679_6)
		switch curField5zgensym_1676ddababda6679_6 {
		// -- templateDecodeMsg ends here --

		case "A_zid00_map":
			found5zgensym_1676ddababda6679_6[0] = true
			var zgensym_1676ddababda6679_7 uint32
			zgensym_1676ddababda6679_7, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.A == nil && zgensym_1676ddababda6679_7 > 0 {
				z.A = make(map[string]int, zgensym_1676ddababda6679_7)
			} else if len(z.A) > 0 {
				for key, _ := range z.A {
					delete(z.A, key)
				}
			}
			for zgensym_1676ddababda6679_7 > 0 {
				zgensym_1676ddababda6679_7--
				var zgensym_1676ddababda6679_0 string
				var zgensym_1676ddababda6679_1 int
				zgensym_1676ddababda6679_0, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_1676ddababda6679_1, err = dc.ReadInt()
				if err != nil {
					return
				}
				z.A[zgensym_1676ddababda6679_0] = zgensym_1676ddababda6679_1
			}
		case "B_zid01_map":
			found5zgensym_1676ddababda6679_6[1] = true
			var zgensym_1676ddababda6679_8 uint32
			zgensym_1676ddababda6679_8, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.B == nil && zgensym_1676ddababda6679_8 > 0 {
				z.B = make(map[int]string, zgensym_1676ddababda6679_8)
			} else if len(z.B) > 0 {
				for key, _ := range z.B {
					delete(z.B, key)
				}
			}
			for zgensym_1676ddababda6679_8 > 0 {
				zgensym_1676ddababda6679_8--
				var zgensym_1676ddababda6679_2 int
				var zgensym_1676ddababda6679_3 string
				zgensym_1676ddababda6679_2, err = dc.ReadInt()
				if err != nil {
					return
				}
				zgensym_1676ddababda6679_3, err = dc.ReadString()
				if err != nil {
					return
				}
				z.B[zgensym_1676ddababda6679_2] = zgensym_1676ddababda6679_3
			}
		case "C_zid02_slc":
			found5zgensym_1676ddababda6679_6[2] = true
			var zgensym_1676ddababda6679_9 uint32
			zgensym_1676ddababda6679_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.C) >= int(zgensym_1676ddababda6679_9) {
				z.C = (z.C)[:zgensym_1676ddababda6679_9]
			} else {
				z.C = make([]float64, zgensym_1676ddababda6679_9)
			}
			for zgensym_1676ddababda6679_4 := range z.C {
				z.C[zgensym_1676ddababda6679_4], err = dc.ReadFloat64()
				if err != nil {
					return
				}
			}
		case "Tm_zid03_tim":
			found5zgensym_1676ddababda6679_6[3] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss5zgensym_1676ddababda6679_6 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MyStruct
var decodeMsgFieldOrder5zgensym_1676ddababda6679_6 = []string{"A_zid00_map", "B_zid01_map", "C_zid02_slc", "Tm_zid03_tim"}

var decodeMsgFieldSkip5zgensym_1676ddababda6679_6 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *MyStruct) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.A) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.B) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.C) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *MyStruct) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_1676ddababda6679_10 [4]bool
	fieldsInUse_zgensym_1676ddababda6679_11 := z.fieldsNotEmpty(empty_zgensym_1676ddababda6679_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_1676ddababda6679_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'MyStruct'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_1676ddababda6679_10[0] {
		// write "A_zid00_map"
		err = en.Append(0xab, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.A)))
		if err != nil {
			return
		}
		for zgensym_1676ddababda6679_0, zgensym_1676ddababda6679_1 := range z.A {
			err = en.WriteString(zgensym_1676ddababda6679_0)
			if err != nil {
				return
			}
			err = en.WriteInt(zgensym_1676ddababda6679_1)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_1676ddababda6679_10[1] {
		// write "B_zid01_map"
		err = en.Append(0xab, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.B)))
		if err != nil {
			return
		}
		for zgensym_1676ddababda6679_2, zgensym_1676ddababda6679_3 := range z.B {
			err = en.WriteInt(zgensym_1676ddababda6679_2)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_1676ddababda6679_3)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_1676ddababda6679_10[2] {
		// write "C_zid02_slc"
		err = en.Append(0xab, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.C)))
		if err != nil {
			return
		}
		for zgensym_1676ddababda6679_4 := range z.C {
			err = en.WriteFloat64(z.C[zgensym_1676ddababda6679_4])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_1676ddababda6679_10[3] {
		// write "Tm_zid03_tim"
		err = en.Append(0xac, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MyStruct) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "A_zid00_map"
		o = append(o, 0xab, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.A)))
		for zgensym_1676ddababda6679_0, zgensym_1676ddababda6679_1 := range z.A {
			o = msgp.AppendString(o, zgensym_1676ddababda6679_0)
			o = msgp.AppendInt(o, zgensym_1676ddababda6679_1)
		}
	}

	if !empty[1] {
		// string "B_zid01_map"
		o = append(o, 0xab, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.B)))
		for zgensym_1676ddababda6679_2, zgensym_1676ddababda6679_3 := range z.B {
			o = msgp.AppendInt(o, zgensym_1676ddababda6679_2)
			o = msgp.AppendString(o, zgensym_1676ddababda6679_3)
		}
	}

	if !empty[2] {
		// string "C_zid02_slc"
		o = append(o, 0xab, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.C)))
		for zgensym_1676ddababda6679_4 := range z.C {
			o = msgp.AppendFloat64(o, z.C[zgensym_1676ddababda6679_4])
		}
	}

	if !empty[3] {
		// string "Tm_zid03_tim"
		o = append(o, 0xac, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Tm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MyStruct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *MyStruct) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_1676ddababda6679_13 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_1676ddababda6679_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_1676ddababda6679_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_1676ddababda6679_13 := totalEncodedFields12zgensym_1676ddababda6679_13
	missingFieldsLeft12zgensym_1676ddababda6679_13 := maxFields12zgensym_1676ddababda6679_13 - totalEncodedFields12zgensym_1676ddababda6679_13

	var nextMiss12zgensym_1676ddababda6679_13 int32 = -1
	var found12zgensym_1676ddababda6679_13 [maxFields12zgensym_1676ddababda6679_13]bool
	var curField12zgensym_1676ddababda6679_13 string

doneWithStruct12zgensym_1676ddababda6679_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_1676ddababda6679_13 > 0 || missingFieldsLeft12zgensym_1676ddababda6679_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_1676ddababda6679_13, missingFieldsLeft12zgensym_1676ddababda6679_13, msgp.ShowFound(found12zgensym_1676ddababda6679_13[:]), unmarshalMsgFieldOrder12zgensym_1676ddababda6679_13)
		if encodedFieldsLeft12zgensym_1676ddababda6679_13 > 0 {
			encodedFieldsLeft12zgensym_1676ddababda6679_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_1676ddababda6679_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_1676ddababda6679_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_1676ddababda6679_13 = 0
			}
			for nextMiss12zgensym_1676ddababda6679_13 < maxFields12zgensym_1676ddababda6679_13 && (found12zgensym_1676ddababda6679_13[nextMiss12zgensym_1676ddababda6679_13] || unmarshalMsgFieldSkip12zgensym_1676ddababda6679_13[nextMiss12zgensym_1676ddababda6679_13]) {
				nextMiss12zgensym_1676ddababda6679_13++
			}
			if nextMiss12zgensym_1676ddababda6679_13 == maxFields12zgensym_1676ddababda6679_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_1676ddababda6679_13
			}
			missingFieldsLeft12zgensym_1676ddababda6679_13--
			curField12zgensym_1676ddababda6679_13 = unmarshalMsgFieldOrder12zgensym_1676ddababda6679_13[nextMiss12zgensym_1676ddababda6679_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_1676ddababda6679_13)
		switch curField12zgensym_1676ddababda6679_13 {
		// -- templateUnmarshalMsg ends here --

		case "A_zid00_map":
			found12zgensym_1676ddababda6679_13[0] = true
			if nbs.AlwaysNil {
				if len(z.A) > 0 {
					for key, _ := range z.A {
						delete(z.A, key)
					}
				}

			} else {

				var zgensym_1676ddababda6679_14 uint32
				zgensym_1676ddababda6679_14, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.A == nil && zgensym_1676ddababda6679_14 > 0 {
					z.A = make(map[string]int, zgensym_1676ddababda6679_14)
				} else if len(z.A) > 0 {
					for key, _ := range z.A {
						delete(z.A, key)
					}
				}
				for zgensym_1676ddababda6679_14 > 0 {
					var zgensym_1676ddababda6679_0 string
					var zgensym_1676ddababda6679_1 int
					zgensym_1676ddababda6679_14--
					zgensym_1676ddababda6679_0, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_1676ddababda6679_1, bts, err = nbs.ReadIntBytes(bts)

					if err != nil {
						return
					}
					z.A[zgensym_1676ddababda6679_0] = zgensym_1676ddababda6679_1
				}
			}
		case "B_zid01_map":
			found12zgensym_1676ddababda6679_13[1] = true
			if nbs.AlwaysNil {
				if len(z.B) > 0 {
					for key, _ := range z.B {
						delete(z.B, key)
					}
				}

			} else {

				var zgensym_1676ddababda6679_15 uint32
				zgensym_1676ddababda6679_15, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.B == nil && zgensym_1676ddababda6679_15 > 0 {
					z.B = make(map[int]string, zgensym_1676ddababda6679_15)
				} else if len(z.B) > 0 {
					for key, _ := range z.B {
						delete(z.B, key)
					}
				}
				for zgensym_1676ddababda6679_15 > 0 {
					var zgensym_1676ddababda6679_2 int
					var zgensym_1676ddababda6679_3 string
					zgensym_1676ddababda6679_15--
					zgensym_1676ddababda6679_2, bts, err = nbs.ReadIntBytes(bts)
					if err != nil {
						return
					}
					zgensym_1676ddababda6679_3, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.B[zgensym_1676ddababda6679_2] = zgensym_1676ddababda6679_3
				}
			}
		case "C_zid02_slc":
			found12zgensym_1676ddababda6679_13[2] = true
			if nbs.AlwaysNil {
				(z.C) = (z.C)[:0]
			} else {

				var zgensym_1676ddababda6679_16 uint32
				zgensym_1676ddababda6679_16, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.C) >= int(zgensym_1676ddababda6679_16) {
					z.C = (z.C)[:zgensym_1676ddababda6679_16]
				} else {
					z.C = make([]float64, zgensym_1676ddababda6679_16)
				}
				for zgensym_1676ddababda6679_4 := range z.C {
					z.C[zgensym_1676ddababda6679_4], bts, err = nbs.ReadFloat64Bytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "Tm_zid03_tim":
			found12zgensym_1676ddababda6679_13[3] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_1676ddababda6679_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MyStruct
var unmarshalMsgFieldOrder12zgensym_1676ddababda6679_13 = []string{"A_zid00_map", "B_zid01_map", "C_zid02_slc", "Tm_zid03_tim"}

var unmarshalMsgFieldSkip12zgensym_1676ddababda6679_13 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MyStruct) Msgsize() (s int) {
	s = 1 + 12 + msgp.MapHeaderSize
	if z.A != nil {
		for zgensym_1676ddababda6679_0, zgensym_1676ddababda6679_1 := range z.A {
			_ = zgensym_1676ddababda6679_1
			_ = zgensym_1676ddababda6679_0
			s += msgp.StringPrefixSize + len(zgensym_1676ddababda6679_0) + msgp.IntSize
		}
	}
	s += 12 + msgp.MapHeaderSize
	if z.B != nil {
		for zgensym_1676ddababda6679_2, zgensym_1676ddababda6679_3 := range z.B {
			_ = zgensym_1676ddababda6679_3
			_ = zgensym_1676ddababda6679_2
			s += msgp.IntSize + msgp.StringPrefixSize + len(zgensym_1676ddababda6679_3)
		}
	}
	s += 12 + msgp.ArrayHeaderSize + (len(z.C) * (msgp.Float64Size)) + 13 + msgp.TimeSize
	return
}
